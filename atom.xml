<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悠悠我心</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-11T06:50:52.465Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>悠悠我心</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 添加票据到wallet</title>
    <link href="http://yoursite.com/2019/01/11/saveToWallet/"/>
    <id>http://yoursite.com/2019/01/11/saveToWallet/</id>
    <published>2019-01-11T00:58:15.239Z</published>
    <updated>2019-01-11T06:50:52.465Z</updated>
    
    <content type="html"><![CDATA[<p>wallet的前身为passbook，2015年WWDC大会苹果正式改名wallet，passbook是苹果2012年iOS6开放出来的新功能.可以帮助用户管理五种类型（Boarding passes（登机牌），Coupons（优惠券），Store cards（购物卡），Event tickets（入场券），Generic（通用卡））的票据</p><a id="more"></a><p>在iOS中一个Pass其实就是一个.pkpass文件，事实上它是一个Zip压缩包，只是这个压缩包要按照一定的目录结构来设计<br>如何创建一个Pass可以参考Apple的文档<br><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/YourFirst.html#//apple_ref/doc/uid/TP40012195-CH2-SW1" target="_blank" rel="noopener">https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/YourFirst.html#//apple_ref/doc/uid/TP40012195-CH2-SW1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">-(void)addPassbookView:(NSData *)date&#123;</span><br><span class="line">    NSError *error = nil;</span><br><span class="line">    BOOL passEnbale = [PKPassLibrary isPassLibraryAvailable];//检查pass是否可用</span><br><span class="line">    if (![PKPassLibrary isPassLibraryAvailable]) &#123;//</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            //[[WaitDialogFullS sharedWaitDialog] endLoading];</span><br><span class="line">            [[[UIAlertView alloc] initWithTitle:@&quot;Error&quot;</span><br><span class="line">                                        message:@&quot;PassKit not available&quot;</span><br><span class="line">                                       delegate:nil</span><br><span class="line">                              cancelButtonTitle:GDLocalizedString(@&quot;jpyd_ok&quot;)</span><br><span class="line">                              otherButtonTitles: nil] show];</span><br><span class="line">        &#125;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (passEnbale) &#123;</span><br><span class="line">        PKPass *onePass = [[PKPass alloc] initWithData:date error:&amp;error];</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">               // [[WaitDialogFullS sharedWaitDialog] endLoading];</span><br><span class="line">                ZNLog(@&quot;!!!!!ERROR:%@&quot;,[error description]);</span><br><span class="line">                </span><br><span class="line">                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:GDLocalizedString(@&quot;jpyd_Friendlyreminder&quot;) message:GDLocalizedString(@&quot;sy_onePass&quot;) delegate:nil cancelButtonTitle:GDLocalizedString(@&quot;jpyd_ok&quot;) otherButtonTitles:nil, nil];</span><br><span class="line">                [alert show];</span><br><span class="line">                [alert release];</span><br><span class="line">            &#125;);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            PKAddPassesViewController *passAddViewController = [[[PKAddPassesViewController alloc] initWithPass:onePass]autorelease];</span><br><span class="line">            passAddViewController.delegate = self;</span><br><span class="line">            ChinaEastViewController *app = [ChinaEastViewController sharedBankcommViewController];</span><br><span class="line">            //Application tried to present a nil modal view controller on target .修改听云，李良</span><br><span class="line">            if (passAddViewController) &#123;</span><br><span class="line">                [app presentViewController:passAddViewController animated:YES completion:^&#123;</span><br><span class="line">                   // [[WaitDialogFullS sharedWaitDialog] endLoading];</span><br><span class="line">                &#125;];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wallet的前身为passbook，2015年WWDC大会苹果正式改名wallet，passbook是苹果2012年iOS6开放出来的新功能.可以帮助用户管理五种类型（Boarding passes（登机牌），Coupons（优惠券），Store cards（购物卡），Event tickets（入场券），Generic（通用卡））的票据&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CADisplayLink小知识点获得FPS</title>
    <link href="http://yoursite.com/2019/01/10/CADisplayLink%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E8%8E%B7%E5%BE%97FPS/"/>
    <id>http://yoursite.com/2019/01/10/CADisplayLink小知识点获得FPS/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:55:42.997Z</updated>
    
    <content type="html"><![CDATA[<p>###CADisplayLink是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类. iPhone设备的屏幕刷新是60Hz，即一秒60次。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//CADisplayLink</span><br><span class="line">CADisplayLink * timer = [CADisplayLink displayLinkWithTarget:self selector:@selector(tick:)];</span><br><span class="line"></span><br><span class="line">[_link addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];</span><br><span class="line"></span><br><span class="line">- (void)tick:(CADisplayLink *)link &#123;</span><br><span class="line">if (_lastTime == 0) &#123;//上一次屏幕刷新的时间</span><br><span class="line">_lastTime = link.timestamp;//屏幕刷新的时间戳</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_count++;//刷新次数</span><br><span class="line">NSTimeInterval delta = link.timestamp - _lastTime;//获得两次刷新的时间间隔</span><br><span class="line">if (delta &lt; 1) return;//间隔1秒</span><br><span class="line">_lastTime = link.timestamp;</span><br><span class="line">float fps = _count / delta;//fps = 次数/时间间隔</span><br><span class="line">_count = 0;//置零 重新计算</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###CADisplayLink是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类. iPhone设备的屏幕刷新是60Hz，即一秒60次。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CGAffineTransform和CATransform3D原理</title>
    <link href="http://yoursite.com/2019/01/10/CGAffineTransform%E5%92%8CCATransform3D%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/01/10/CGAffineTransform和CATransform3D原理/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-23T02:45:08.022Z</updated>
    
    <content type="html"><![CDATA[<p>####简述<br>CGAffineTransform是用来做View层2D的形变的，UIView有个属性transform的类型就是CGAffineTransform<br>CATransform3D是用来做layer层3D的形变的，CALayer也有个属性transform的类型就是CATransform3D</p><p>那么CGAffineTransform和CATransform3D的原理是什么呢？<br><a id="more"></a></p><p>###先来看CGAffineTransform<br>查看源码发现这是个结构体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct CGAffineTransform &#123;</span><br><span class="line">CGFloat a, b, c, d;</span><br><span class="line">CGFloat tx, ty;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们先来看下平移的方法CGAffineTransformMakeTranslation(CGFloat tx,<br>CGFloat ty)的原理是什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* Return a transform which translates by `(tx, ty)&apos;:</span><br><span class="line">t&apos; = [ 1 0 0 1 tx ty ] */</span><br><span class="line"></span><br><span class="line">CG_EXTERN CGAffineTransform CGAffineTransformMakeTranslation(CGFloat tx,</span><br><span class="line">CGFloat ty) CG_AVAILABLE_STARTING(10.0, 2.0);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提示：</span><br><span class="line">为了把二维图形的变化统一在一个坐标系里，这里用到了齐次坐标的概</span><br><span class="line">念，即把一个二维图形用一个三维矩阵表示，其中第三列总是(0,0,1)，</span><br><span class="line">用来作为坐标系的标准。所以所有的变化都由前两列完成。</span><br></pre></td></tr></table></figure><p>那么，CGAffineTransform结构体中的参数用矩阵来表示，如下：</p><p>|a    b    0|</p><p>|c    d    0|</p><p>|tx   ty   1|</p><p>运算的原理：设原坐标为(X,Y,1),通过矩阵运算如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|a    b    0|</span><br><span class="line">[X,Y,1]      |c    d    0|   =   [aX + cY + tx   bX + dY + ty  1] </span><br><span class="line">|tx   ty   1|</span><br></pre></td></tr></table></figure></p><p>矩阵运算后的坐标[aX + cY + tx   bX + dY + ty  1]</p><p>我们将 t’ = [ 1 0 0 1 tx ty ]代入公式[aX + cY + tx   bX + dY + ty  1]中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[aX + cY + tx   bX + dY + ty  1] = [X + tx , Y + ty, 1]</span><br></pre></td></tr></table></figure></p><p>我们发现X坐标向左移动了tx,Y坐标向下移动了ty，这就是方法CGAffineTransformMakeTranslation(CGFloat tx,<br>CGFloat ty)的原理 </p><p>同样的道理，CGAffineTransform的所有方法的原理都是通过这种矩阵的运算，来实现坐标的变换的</p><p>###再来看看 CATransform3D<br>CATransform3D也是结构体，这里也是引入齐次坐标的概念，将三维图形的变化用四维矩阵来表示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct CATransform3D</span><br><span class="line">&#123;</span><br><span class="line">CGFloat m11, m12, m13, m14;</span><br><span class="line">CGFloat m21, m22, m23, m24;</span><br><span class="line">CGFloat m31, m32, m33, m34;</span><br><span class="line">CGFloat m41, m42, m43, m44;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>设原坐标为(X,Y,Z,1)，通过矩阵运算的到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[m11, m12, m13, m14]</span><br><span class="line"></span><br><span class="line">[m21, m22, m23, m24]</span><br><span class="line"></span><br><span class="line">[X,Y,Z,1]         [m31, m32, m33, m34]     =  [m11X+ m21Y + m31Z + m41,m12X+m22Y+m32Z+m42,m13X+m23Y+m33Z+m43,m14+m24+m34+m44];</span><br><span class="line"></span><br><span class="line">[m41, m42, m43, m44]</span><br></pre></td></tr></table></figure></p><p>我们还是来看平移的方法CATransform3DMakeTranslation (CGFloat tx,<br>CGFloat ty, CGFloat tz)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* Returns a transform that translates by &apos;(tx, ty, tz)&apos;:</span><br><span class="line">* t&apos; =  [1 0 0 0; 0 1 0 0; 0 0 1 0; tx ty tz 1]. */  </span><br><span class="line">CATransform3D CATransform3DMakeTranslation (CGFloat tx,</span><br><span class="line">CGFloat ty, CGFloat tz)</span><br></pre></td></tr></table></figure><p>把t’ =  [1 0 0 0; 0 1 0 0; 0 0 1 0; tx ty tz 1]代入公式 [m11X+ m21Y + m31Z + m41,m12X+m22Y+m32Z+m42,m13X+m23Y+m33Z+m43,m14+m24+m34+m44];</p><p>(X,Y,Z,1) = （X + tx,Y+ty,Z+tz,1）即X、Y、Z坐标的平移<br>CATransform3D其他方法的原理是类似的就不啰嗦了</p><p>####最后再附上CGAffineTransform和CATransform3D相互转化的API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* Return a transform with the same effect as affine transform &apos;m&apos;. */</span><br><span class="line">CATransform3D CATransform3DMakeAffineTransform (CGAffineTransform m)  </span><br><span class="line"></span><br><span class="line">/* Returns the affine transform represented by &apos;t&apos;. If &apos;t&apos; can not be</span><br><span class="line">* represented exactly by an affine transform the returned value is</span><br><span class="line">* undefined. */  </span><br><span class="line">CGAffineTransform CATransform3DGetAffineTransform (CATransform3D t)</span><br></pre></td></tr></table></figure><p>以上，懂了原理之后是不是感觉其实很简单的呢</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####简述&lt;br&gt;CGAffineTransform是用来做View层2D的形变的，UIView有个属性transform的类型就是CGAffineTransform&lt;br&gt;CATransform3D是用来做layer层3D的形变的，CALayer也有个属性transform的类型就是CATransform3D&lt;/p&gt;
&lt;p&gt;那么CGAffineTransform和CATransform3D的原理是什么呢？&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac端口被占用解决办法</title>
    <link href="http://yoursite.com/2019/01/10/Mac%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/10/Mac端口被占用解决办法/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T01:10:56.376Z</updated>
    
    <content type="html"><![CDATA[<p>1、命令 lsof -i tcp:port  （port替换成端口号，比如8081）可以查看该端口被什么程序占用，并显示pid，方便KILL</p><p>2、使用kill -9 + pid </p><p>3、重启xcode</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、命令 lsof -i tcp:port  （port替换成端口号，比如8081）可以查看该端口被什么程序占用，并显示pid，方便KILL&lt;/p&gt;
&lt;p&gt;2、使用kill -9 + pid &lt;/p&gt;
&lt;p&gt;3、重启xcode&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift  String和NSDate的相互转化</title>
    <link href="http://yoursite.com/2019/01/10/Swift%20%20String%E5%92%8CNSDate%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96/"/>
    <id>http://yoursite.com/2019/01/10/Swift  String和NSDate的相互转化/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:50:52.422Z</updated>
    
    <content type="html"><![CDATA[<p>####1.String 转化成 NSDate :<br>通常我在提交数据的时候时间格式都是14位,例如:”20161224191234”, 为了开发方便,需要把字符串转化成 NSDate<br>let dateString = “20161224191234”</p><a id="more"></a><p>let formatter = NSDateFormatter()<br>formatter.dateFormat = “yyyyMMddHHmmss”<br>formatter.dateFromString(dateString)</p><p>这里的 dateFormat 格式要跟你自己的日期字符串格式一样, HH 为24小时制须大写,如不大写,上面转换出来结果为 nil.</p><p>####2.NSDate 转化成 String</p><p>var normalTime:String{<br>    let formatter = NSDateFormatter()<br>         formatter.dateFormat = “yyyy-MM-dd HH:mm:ss”<br>             return formatter.stringFromDate(NSDate())<br>             }<br>             这样结果就是2016-12-24 19:12:34的格式,格式由自己需求来定</p><pre><code>####3.由日期判断是星期几        扩展 NSDate,写一个方法        extension NSDate{            func resultWeek()-&gt;Int{                 let interval = self.timeIntervalSince1970                         let day = Int(interval/86400)                                return (day-3)%7                                     }                                     }                                     上面的&quot;20161224191234&quot;判断一下是周几                                     let weeks = [&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;]                                     let week = weeks[formatter.dateFromString(dateString)!.resultWeek()] 结果是星期六                                     ####4.判断两个日期时间差                                     let firstDate = &quot;2016-09-24&quot;                                     let secondDate = &quot;2016-12-24&quot;                                     let cformatter = NSDateFormatter()                                     cformatter.dateFormat = &quot;yyyy-MM-dd&quot;                                     let sDate = cformatter.dateFromString(firstDate)                                     let cDate = cformatter.dateFromString(secondDate)                                     let intervals = cDate?.timeIntervalSinceDate(sDate!) //时间差(单位是秒)                                     let day_seconds = 24*3600 //一天的秒数                                     let days = Int(intervals!)/day_seconds //结果就是两个日期的时间差(单位是天)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####1.String 转化成 NSDate :&lt;br&gt;通常我在提交数据的时候时间格式都是14位,例如:”20161224191234”, 为了开发方便,需要把字符串转化成 NSDate&lt;br&gt;let dateString = “20161224191234”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TCP与UDP区别</title>
    <link href="http://yoursite.com/2019/01/10/TCP%E4%B8%8EUDP%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/01/10/TCP与UDP区别/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:55:41.151Z</updated>
    
    <content type="html"><![CDATA[<p>TCP与UDP区别总结：<br>1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付</p><a id="more"></a><p>3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的<br>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>5、TCP首部开销20字节;UDP的首部开销小，只有8个字节<br>6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p><p>UDP补充：<br>UDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。并且它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，UDP也无法进行流量控制等避免网络拥塞的行为。此外，传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。UDP有点类似于用户说什么听什么的机制，但是需要用户充分考虑好上层协议类型并制作相应的应用程序。</p><p>TCP补充：<br>TCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TCP与UDP区别总结：&lt;br&gt;1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接&lt;br&gt;2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/10/hello-world/"/>
    <id>http://yoursite.com/2019/01/10/hello-world/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T05:38:04.287Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天是个人博客开通的第一天，搞了半天终于好了，好激动！！！<br>以前自己做的学习记录有在本地文件的，有在备忘录的，有在简书的。。。反正就是各种地方，很多慢慢都找不到了。这次正好最近闲下来整理下。慢慢的都放到自己的博客中。</p></blockquote><p> 我有一头<strong>小毛驴</strong>，可是我从来都不骑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天是个人博客开通的第一天，搞了半天终于好了，好激动！！！&lt;br&gt;以前自己做的学习记录有在本地文件的，有在备忘录的，有在简书的。。。反正就是各种地方，很多慢慢都找不到了。这次正好最近闲下来整理下。慢慢的都放到自己的博客中。&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 协议中定义属性</title>
    <link href="http://yoursite.com/2019/01/10/iOS%20%E5%8D%8F%E8%AE%AE%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2019/01/10/iOS 协议中定义属性/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T07:00:37.693Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@protocol CETableViewModelProtocol &lt;NSObject&gt;</span><br><span class="line">@property (nonatomic, strong) Class cellClass;</span><br><span class="line">@property (nonatomic,  copy ) NSString* cellType;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><a id="more"></a><p>协议中是可以定义属性的，但是只有对应的getter和setter方法 但是没有对应的成员变量 而getter和setter就是操作的对应成员变量</p><p>所以就无法调用getter或者setter 否则项目崩溃</p><p>想要调用的话 需要在实现这个协议的类中用@synthesize cellType     = _cellType;来声明成员变量,这样这个类的对象就拥有了协议中定义的这些属性，用法跟自身其他属性一样就不啰嗦了。</p><p>来看看实例吧：</p><p>.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;CETableViewModelProtocol.h&quot;</span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface CETableViewModel : NSObject &lt;CETableViewModelProtocol&gt;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>.m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;CETableViewModel.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation CETableViewModel</span><br><span class="line">@synthesize cellHeight   = _cellHeight;</span><br><span class="line">@synthesize cellType     = _cellType;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol CETableViewModelProtocol &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) Class cellClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,  copy ) NSString* cellType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 宏(define)与常量(const)以及extern</title>
    <link href="http://yoursite.com/2019/01/10/iOS%20%E5%AE%8F(define)%E4%B8%8E%E5%B8%B8%E9%87%8F(const)%E4%BB%A5%E5%8F%8Aextern/"/>
    <id>http://yoursite.com/2019/01/10/iOS 宏(define)与常量(const)以及extern/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:55:42.975Z</updated>
    
    <content type="html"><![CDATA[<p>###思考下，下面的有什么不同，分别在什么时候使用呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define HSCoder @&quot;汉斯哈哈哈&quot;</span><br><span class="line">NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">extern NSString *HSCoder;</span><br><span class="line">extern const NSString *HSCoder;</span><br><span class="line"></span><br><span class="line">static const NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line"></span><br><span class="line">const NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">NSString const *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>###当我们想全局共用一些数据时，可以用宏、变量、常量</p><p>宏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define HSCoder @&quot;汉斯哈哈哈&quot;</span><br></pre></td></tr></table></figure></p><p>变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br></pre></td></tr></table></figure></p><p>常量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四种写法：</span><br><span class="line">static const NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">const NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">NSString const *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">NSString * const HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br></pre></td></tr></table></figure></p><p>宏：只是在预处理器里进行文本替换，没有类型，不做任何类型检查，编译器可以对相同的字符串进行优化。只保存一份到 .rodata 段。甚至有相同后缀的字符串也可以优化，你可以用GCC 编译测试，”Hello world” 与 “world” 两个字符串，只存储前面一个。取的时候只需要给前面和中间的地址，如果是整形、浮点型会有多份拷贝，但这些数写在指令中。占的只是代码段而已，大量用宏会导致二进制文件变大</p><p>变量：共享一块内存空间，就算项目中N处用到，也不会分配N块内存空间，可以被修改，在编译阶段会执行类型检查</p><p>常量：共享一块内存空间，就算项目中N处用到，也不会分配N块内存空间，可以根据const修饰的位置设定能否修改，在编译阶段会执行类型检查</p><p>###const和static const区分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const NSString *HSCoder = @&quot;汉斯哈哈哈&quot;; //本文件内部的全局常量</span><br><span class="line"></span><br><span class="line">static const NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;//用static修饰后，不能提供外界访问,只能在本文件内访问,或者导入本文件可用（iOS中只有.h文件的导入，所以定义在.h中，如果导入.h头文件那么外部也可以用，如果定义在.m则只能在.m本文件内部使用）</span><br></pre></td></tr></table></figure></p><p>###const修饰位置<br>const右边的总不能被修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.const NSString *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">&quot;*HSCoder&quot;不能被修改， &quot;HSCoder&quot;能被修改</span><br><span class="line"></span><br><span class="line">2.NSString const *HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">&quot;*HSCoder&quot;不能被修改， &quot;HSCoder&quot;能被修改</span><br><span class="line"></span><br><span class="line">3.NSString * const HSCoder = @&quot;汉斯哈哈哈&quot;;</span><br><span class="line">&quot;HSCoder&quot;不能被修改，&quot;*HSCoder&quot;能被修改</span><br></pre></td></tr></table></figure></p><h4 id="“static作用”"><a href="#“static作用”" class="headerlink" title="“static作用”:"></a>“static作用”:</h4><ul><li>修饰局部变量：</li></ul><p>1.延长局部变量的生命周期,程序结束才会销毁。</p><p>2.局部变量只会生成一份内存,只会初始化一次。</p><p>3.改变局部变量的作用域。</p><ul><li>修饰全局变量</li></ul><p>1.只能在本文件中访问,修改全局变量的作用域,生命周期不会改</p><p>2.避免重复定义全局变量</p><p>####const作用：限制类型</p><ul><li>1.const仅仅用来修饰右边的变量（基本数据变量p，指针变量*p）</li><li>2.被const修饰的变量是只读的。</li></ul><p>####”extern作用”:</p><ul><li>只是用来获取全局变量(包括全局静态变量)的值，不能用于定义变量</li><li>“extern工作原理”:</li><li>先在当前文件查找有没有全局变量，没有找到，才会去其他文件查找。</li></ul><p>知识补充：<br>对于指针a来说，*a就是指针a所指向的内存空间存储的值,&amp;a就是存储这个变量的内存地址,a是指针名</p><p>staic和const联合的作用:声明一个静态的全局只读常量,在”一个文件中”经常使用的字符串常量，可以使用static与const组合</p><p>extern与const组合的作用：在”多个文件中”经常使用的同一个字符串常量，可以使用extern与const组合。</p><ul><li>static与const组合：在每个文件都需要定义一份静态全局变量。</li><li>extern与const组合:只需要定义一份全局变量，多个文件共享</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###思考下，下面的有什么不同，分别在什么时候使用呢？&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define HSCoder @&amp;quot;汉斯哈哈哈&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *HSCoder = @&amp;quot;汉斯哈哈哈&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern NSString *HSCoder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern const NSString *HSCoder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static const NSString *HSCoder = @&amp;quot;汉斯哈哈哈&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const NSString *HSCoder = @&amp;quot;汉斯哈哈哈&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString const *HSCoder = @&amp;quot;汉斯哈哈哈&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中的@synthesize</title>
    <link href="http://yoursite.com/2019/01/10/iOS%E4%B8%AD%E7%9A%84@synthesize/"/>
    <id>http://yoursite.com/2019/01/10/iOS中的@synthesize/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:34:05.457Z</updated>
    
    <content type="html"><![CDATA[<p>常见的有两种用法 其实是一个意思</p><ul><li><p>@synthesize student;   等价于 @synthesize student = student</p></li><li><p>@synthesize student = _student</p></li></ul><p>ARC下 通过@property声明的属性，编译器会自动声明对应的成员变量和getter/setter方法 而@synthesize student = _student就是程序猿自己显式地声明属性对应的成员变量，而不用编译器自生成的<br><a id="more"></a><br>我们知道getter和setter方法里面操作的其实就是属性对应的成员变量 成员变量其实本质上就是一个变量指针</p><p>那么调用两者有什么区别呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.name = @&quot;我信你个鬼&quot;;</span><br><span class="line">_name = @&quot;我信你个大头鬼&quot;;</span><br></pre></td></tr></table></figure></p><p>self.name本质上是调用的setter方法setName() 而setter方法是依赖于@property的属性修饰符的，比如retain，assign等属性。也就是会影响其引用计数</p><p>而_name = @”我信你个大头鬼” 只是变量的赋值 不涉及retain、assign等</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的有两种用法 其实是一个意思&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@synthesize student;   等价于 @synthesize student = student&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@synthesize student = _student&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ARC下 通过@property声明的属性，编译器会自动声明对应的成员变量和getter/setter方法 而@synthesize student = _student就是程序猿自己显式地声明属性对应的成员变量，而不用编译器自生成的&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS之创建一个常驻线程</title>
    <link href="http://yoursite.com/2019/01/10/iOS%E4%B9%8B%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/01/10/iOS之创建一个常驻线程/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:50:52.460Z</updated>
    
    <content type="html"><![CDATA[<p>常驻线程有什么用呢？<br>让一个一直存在的子线程，等待其他线程发来消息，处理其他事件。</p><p>注意 ：不要使用GCD的global队列创建常驻线程<br>原因：global全局队列，整个工程共用的队列，队列里的所有线程都会放进一个线程池中，当线程池满了的时候，就会进入等待</p><a id="more"></a><p>状态，后面加进来的block就不会创建新的线程执行了 等待前面的任务执行完成，才会继续执行。如果线程池中的线程长时间不结束，后续堆积的任务会越来越多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@interface LongThreadDemoController ()</span><br><span class="line">@property (nonatomic, strong) NSThread *thread;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation LongThreadDemoController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">[super viewDidLoad];</span><br><span class="line">self.view.backgroundColor = [UIColor whiteColor];</span><br><span class="line">self.title = @&quot;常驻线程Demo&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)threadRunloopPoint:(id)__unused object&#123;</span><br><span class="line">NSLog(@&quot;%@&quot;,NSStringFromSelector(_cmd));</span><br><span class="line">@autoreleasepool &#123;</span><br><span class="line">[[NSThread currentThread] setName:@&quot;changzhuThread&quot;];</span><br><span class="line">NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">//// 这里主要是监听某个 port，目的是让这个 Thread 不会回收</span><br><span class="line">[runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];</span><br><span class="line">[runLoop run];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (NSThread *)thread&#123;</span><br><span class="line"></span><br><span class="line">if(!_thread)&#123;</span><br><span class="line">_thread = [[NSThread alloc] initWithTarget:self selector:@selector(threadRunloopPoint:) object:nil];</span><br><span class="line">[_thread start];</span><br><span class="line">&#125;</span><br><span class="line">return _thread;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)test&#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[self performSelector:@selector(test) onThread:self.thread withObject:nil waitUntilDone:NO modes:@[NSDefaultRunLoopMode]];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常驻线程有什么用呢？&lt;br&gt;让一个一直存在的子线程，等待其他线程发来消息，处理其他事件。&lt;/p&gt;
&lt;p&gt;注意 ：不要使用GCD的global队列创建常驻线程&lt;br&gt;原因：global全局队列，整个工程共用的队列，队列里的所有线程都会放进一个线程池中，当线程池满了的时候，就会进入等待&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS保存图片到相册</title>
    <link href="http://yoursite.com/2019/01/10/iOS%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E7%9B%B8%E5%86%8C/"/>
    <id>http://yoursite.com/2019/01/10/iOS保存图片到相册/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T07:02:57.397Z</updated>
    
    <content type="html"><![CDATA[<p>需要导入系统框架</p><p>#import &lt;Photos/Photos.h&gt;</p><p>然后我们直接上代码</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (void)clickQRCode:(UIImage *)image</span><br><span class="line">&#123;</span><br><span class="line">[MBProgressHUD HUDForView:self.view];</span><br><span class="line">[[PHPhotoLibrary sharedPhotoLibrary] performChanges:^&#123;</span><br><span class="line">[PHAssetChangeRequest creationRequestForAssetFromImage:image];</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&#125; completionHandler:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;success = %d, error = %@&quot;, success, error);</span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">[MBProgressHUD hideHUDForView:self.view];</span><br><span class="line"></span><br><span class="line">if (success) &#123;</span><br><span class="line">[MBProgressHUD showSuccess:@&quot;保存成功&quot; toView:self.view];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;请在“设置-隐私”中允许空能净访问您的照片&quot; message:nil delegate:self cancelButtonTitle:@&quot;好的&quot; otherButtonTitles:nil, nil];</span><br><span class="line">[alert show];</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要导入系统框架&lt;/p&gt;
&lt;p&gt;#import &amp;lt;Photos/Photos.h&amp;gt;&lt;/p&gt;
&lt;p&gt;然后我们直接上代码&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS图片拉伸</title>
    <link href="http://yoursite.com/2019/01/10/iOS%E5%9B%BE%E7%89%87%E6%8B%89%E4%BC%B8/"/>
    <id>http://yoursite.com/2019/01/10/iOS图片拉伸/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:55:42.988Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UIImage * img = [UIImage imageNamed:@&quot;3X&quot;];</span><br><span class="line">float w = img.size.width;</span><br><span class="line">float h = img.size.height;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//图片拉伸 当imgview的frame跟img不一样大时就会拉伸图片来填充</span><br><span class="line">//第一个参数 UIEdgeInsets 是规定上下左右到img边的部分不拉伸受到保护 中间部分进行拉伸</span><br><span class="line"></span><br><span class="line">//UIImageResizingModeStretch 拉伸</span><br><span class="line">//UIImageResizingModeTile 平铺</span><br><span class="line">UIImage * newImg = [img resizableImageWithCapInsets:</span><br><span class="line">UIEdgeInsetsMake(h * 0.5, w * 0.5, h * 0.5, w * 0.5)         </span><br><span class="line">resizingMode:</span><br><span class="line">UIImageResizingModeStretch];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UIImage * img = [UIImage imageNamed:@&amp;quot;3X&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float w = img.size.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float h = img.size.height;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tableviewcell注册和不注册的区别及用法</title>
    <link href="http://yoursite.com/2019/01/10/tableviewcell%E6%B3%A8%E5%86%8C%E5%92%8C%E4%B8%8D%E6%B3%A8%E5%86%8C%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/10/tableviewcell注册和不注册的区别及用法/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:55:42.984Z</updated>
    
    <content type="html"><![CDATA[<p>注册和不注册的区别主要看下面这两个方法：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (nullable __kindof UITableViewCell *)dequeueReusableCellWithIdentifier:(NSString *)identifier; </span><br><span class="line">// Used by the delegate to acquire an already allocated cell, in lieu of allocating a new one.</span><br><span class="line">(返回给代理一个已经分配的cell，代替一个新的cell，如果没有已分配的cell，则返回nil，使用这个方法就不需要注册了)</span><br><span class="line"></span><br><span class="line">- (__kindof UITableViewCell *)dequeueReusableCellWithIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath NS_AVAILABLE_IOS(6_0); </span><br><span class="line">// newer dequeue method guarantees a cell is returned and resized properly, assuming identifier is registered  </span><br><span class="line">如果cell的identifier是注册过的，那么这个新列出的方法保证返回一个cell (有分配的就返回已分配的cell，没有返回新的cell)并适当调整大小，可省略cell空值判断步骤，用这个方法cell必须注册,不是自定义的cell，UITableViewCell也要注册</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注册和不注册的区别主要看下面这两个方法：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码修改xib约束的值注意</title>
    <link href="http://yoursite.com/2019/01/10/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9xib%E7%BA%A6%E6%9D%9F%E7%9A%84%E5%80%BC%E6%B3%A8%E6%84%8F/"/>
    <id>http://yoursite.com/2019/01/10/代码修改xib约束的值注意/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:55:42.967Z</updated>
    
    <content type="html"><![CDATA[<p>有时候在初始化中或者viewdidload中直接改变top.constant的值没有用，可能是因为代码设置后 xib后更新（xib加载在代码设置后） 这个时候使用延迟加载即可 </p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[self performSelector:@selector(modifyConstant) withObject:nil afterDelay:0.1];//延迟加载,执行</span><br><span class="line">- (void)modifyConstant&#123;</span><br><span class="line">self.topSafeH.constant += 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候在初始化中或者viewdidload中直接改变top.constant的值没有用，可能是因为代码设置后 xib后更新（xib加载在代码设置后） 这个时候使用延迟加载即可 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决Mac和iOS模拟器间拷贝粘贴的问题</title>
    <link href="http://yoursite.com/2019/01/10/%E8%A7%A3%E5%86%B3Mac%E5%92%8CiOS%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%97%B4%E6%8B%B7%E8%B4%9D%E7%B2%98%E8%B4%B4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/10/解决Mac和iOS模拟器间拷贝粘贴的问题/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T01:50:05.528Z</updated>
    
    <content type="html"><![CDATA[<p>1、检查模拟器的Edit &gt; Automatically Sync Pasteboard是否勾选 如果失效了可以关闭再打开试试<br>2、按照上述操作还不行的,注意 HardWare =&gt; keyboard =&gt; send menu keyboard … 处于勾选状态~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、检查模拟器的Edit &amp;gt; Automatically Sync Pasteboard是否勾选 如果失效了可以关闭再打开试试&lt;br&gt;2、按照上述操作还不行的,注意 HardWare =&amp;gt; keyboard =&amp;gt; send menu keyboard … 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NSOperation、NSOperationQueue</title>
    <link href="http://yoursite.com/2019/01/10/NSOperation%E3%80%81NSOperationQueue/"/>
    <id>http://yoursite.com/2019/01/10/NSOperation、NSOperationQueue/</id>
    <published>2019-01-10T02:30:28.042Z</published>
    <updated>2019-01-11T06:50:52.402Z</updated>
    
    <content type="html"><![CDATA[<p>####一、 为什么要使用 NSOperation、NSOperationQueue<br>NSOperation、NSOperationQueue 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高。<br>可添加完成的代码块，在操作完成后执行。<br>添加操作之间的依赖关系，方便的控制执行顺序。</p><a id="more"></a><p>设定操作执行的优先级。<br>可以很方便的取消一个操作的执行。<br>使用 KVO 观察对操作执行状态的更改：isExecuteing、isFinished、isCancelled。</p><p>####二、同步异步以及并行串行的区别<br>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态<br>并行串行是指有多个线程的任务的执行方式，串行则多个任务按顺序执行，并行则多个任务会同时执行</p><h4 id="三、-NSOperation-实现多线程的使用步骤分为三步："><a href="#三、-NSOperation-实现多线程的使用步骤分为三步：" class="headerlink" title="三、 NSOperation 实现多线程的使用步骤分为三步："></a>三、 NSOperation 实现多线程的使用步骤分为三步：</h4><p>NSOperation 需要配合 NSOperationQueue 来实现多线程。因为默认情况下，NSOperation 单独使用时系统同步执行操作，配合 NSOperationQueue 我们能更好的实现异步执行。</p><p>1、创建操作：先将需要执行的操作封装到一个NSOperation 对象中。<br>2、创建队列：创建NSOperationQueue对象。<br>3、将操作加入到队列中：将 NSOperation 对象添加到 NSOperationQueue 对象中。</p><p>之后呢，系统就会自动将 NSOperationQueue 中的 NSOperation 取出来，在新线程中执行操作。</p><p>####四、线程死锁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//    NSLog(@&quot;1&quot;);</span><br><span class="line">//    dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">//        NSLog(@&quot;2&quot;);</span><br><span class="line">//    &#125;);</span><br><span class="line">//    NSLog(@&quot;3&quot;);</span><br></pre></td></tr></table></figure></p><p>主线程是串行队列, 一个任务执行完成才能往下执行, 同步线程是一个任务A ,里面的block是同步线程插入到当前线程的另一个任务B ,A要等B执行完才返回 ,B要等A执行完才能执行 ,会相互等待 造成死锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">[super viewDidLoad];</span><br><span class="line">// Do any additional setup after loading the view, typically from a nib.</span><br><span class="line"></span><br><span class="line">//    创建操作</span><br><span class="line">//    [self useInvocationOperation];</span><br><span class="line">////    NSOperation单独使用 同步执行 等待结果返回后执行后面语句</span><br><span class="line">//    NSLog(@&quot;下一个语句&quot;);</span><br><span class="line"></span><br><span class="line">//    [self useBlockOperation];</span><br><span class="line"></span><br><span class="line">//    创建队列</span><br><span class="line">//    [self addOperationToQueue];</span><br><span class="line"></span><br><span class="line">//    添加依赖</span><br><span class="line">//    [self addDependency];</span><br><span class="line"></span><br><span class="line">//    优先级</span><br><span class="line">//    [self queuePriority];</span><br><span class="line"></span><br><span class="line">//    线程间通讯</span><br><span class="line">//    [self communication];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    线程死锁：主线程是串行队列 一个任务执行完成才能往下执行 同步线程是一个任务A 里面的block是同步线程插入到当前线程的另一个任务B A要等B执行完才返回 B要等A执行完才能执行 会相互等待 造成死锁</span><br><span class="line">//    NSLog(@&quot;1&quot;);</span><br><span class="line">//    dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">//        NSLog(@&quot;2&quot;);</span><br><span class="line">//    &#125;);</span><br><span class="line">//    NSLog(@&quot;3&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark -  创建操作</span><br><span class="line">//NSOperation 单独使用时系统同步执行操作</span><br><span class="line">//NSOperation 是个抽象类，不能用来封装操作。我们只有使用它的子类来封装操作。我们有三种方式来封装操作。</span><br><span class="line">//使用子类 NSInvocationOperation</span><br><span class="line">//使用子类 NSBlockOperation</span><br><span class="line">//自定义继承自 NSOperation 的子类，通过实现内部相应的方法来封装操作。</span><br><span class="line">- (void)useInvocationOperation&#123;</span><br><span class="line">NSInvocationOperation *invocationOperation = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(invocationTask) object:nil];</span><br><span class="line"></span><br><span class="line">//    开始操作</span><br><span class="line">[invocationOperation start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//NSBlockOperation 还提供了一个方法 addExecutionBlock:，通过 addExecutionBlock: 就可以为 NSBlockOperation 添加额外的操作。这些操作（包括 blockOperationWithBlock 中的操作）可以在不同的线程中同时（并发）执行(完成顺序是不一定的)。只有当所有相关的操作已经完成执行时，才视为完成</span><br><span class="line"></span><br><span class="line">//一般情况下，如果一个 NSBlockOperation 对象封装了多个操作。NSBlockOperation 是否开启新线程，取决于操作的个数。如果添加的操作的个数多，就会自动开启新线程。当然开启的线程数是由系统来决定的。</span><br><span class="line">- (void)useBlockOperation&#123;</span><br><span class="line">NSBlockOperation * blockOperation = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;blockOperation---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// 2.添加额外的操作</span><br><span class="line">[blockOperation addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[blockOperation addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;3---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[blockOperation addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;4---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[blockOperation addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;5---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[blockOperation addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;6---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[blockOperation addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;7---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[blockOperation addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;8---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    调用 start 方法开始执行操作</span><br><span class="line">[blockOperation start];</span><br><span class="line">&#125;</span><br><span class="line">- (void)useCustomOperation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 创建队列</span><br><span class="line">//NSOperationQueue 创建的自定义队列同时具有串行、并发功能，通过设置属性maxConcurrentOperationCount（最大并发操作数）用来控制一个特定队列中可以有多少个操作同时参与并发执行。</span><br><span class="line">//当最大并发操作数为1时，操作是按顺序串行执行的，并且一个操作完成之后，下一个操作才开始执行。当最大操作并发数为2时，操作是并发执行的，可以同时执行两个操作。而开启线程数量是由系统决定的，不需要我们来管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//那么我们需要将创建好的操作加入到队列中去。总共有两种方法：</span><br><span class="line">//1、- (void)addOperation:(NSOperation *)op;</span><br><span class="line">//2、- (void)addOperationWithBlock:(void (^)(void))block;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 使用 addOperation: 将操作加入到操作队列中</span><br><span class="line">*/</span><br><span class="line">- (void)addOperationToQueue &#123;</span><br><span class="line"></span><br><span class="line">// 1.创建队列</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span><br><span class="line">//    设置最大并发操作数 来控制队列的串行或者并发</span><br><span class="line">queue.maxConcurrentOperationCount = 1;</span><br><span class="line">//    queue.maxConcurrentOperationCount = 8;</span><br><span class="line">// 2.创建操作</span><br><span class="line">// 使用 NSInvocationOperation 创建操作1</span><br><span class="line">NSInvocationOperation *op1 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(invocationTask) object:nil];</span><br><span class="line"></span><br><span class="line">// 使用 NSInvocationOperation 创建操作2</span><br><span class="line">NSInvocationOperation *op2 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(invocationTask2) object:nil];</span><br><span class="line"></span><br><span class="line">op1.queuePriority = NSOperationQueuePriorityHigh;</span><br><span class="line">op2.queuePriority = NSOperationQueuePriorityLow;</span><br><span class="line"></span><br><span class="line">// 使用 NSBlockOperation 创建操作3</span><br><span class="line">NSBlockOperation *op3 = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;3---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[op3 addExecutionBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;4---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// 3.使用 addOperation: 添加所有操作到队列中</span><br><span class="line">[queue addOperation:op1]; // [op1 start] 添加到队列中 无需再自己调用start</span><br><span class="line">[queue addOperation:op2]; // [op2 start]</span><br><span class="line">[queue addOperation:op3]; // [op3 start]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 使用 addOperationWithBlock: 将操作加入到操作队列中</span><br><span class="line">无需自己创建操作对象 直接将操作放到block中</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">- (void)addOperationWithBlockToQueue &#123;</span><br><span class="line">// 1.创建队列</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span><br><span class="line"></span><br><span class="line">// 2.使用 addOperationWithBlock: 添加操作到队列中</span><br><span class="line">[queue addOperationWithBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[queue addOperationWithBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">[queue addOperationWithBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;3---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - NSOperation 操作依赖</span><br><span class="line">//NSOperation、NSOperationQueue 最吸引人的地方是它能添加操作之间的依赖关系。通过操作依赖，我们可以很方便的控制操作之间的执行先后顺序。NSOperation 提供了3个接口供我们管理和查看依赖。</span><br><span class="line">//- (void)addDependency:(NSOperation *)op; 添加依赖，使当前操作依赖于操作 op 的完成。</span><br><span class="line">//- (void)removeDependency:(NSOperation *)op; 移除依赖，取消当前操作对操作 op 的依赖。</span><br><span class="line">//@property (readonly, copy) NSArray&lt;NSOperation *&gt; *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。</span><br><span class="line"></span><br><span class="line">- (void)addDependency &#123;</span><br><span class="line"></span><br><span class="line">// 1.创建队列</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span><br><span class="line"></span><br><span class="line">// 2.创建操作</span><br><span class="line">NSBlockOperation *op1 = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^&#123;</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// 3.添加依赖</span><br><span class="line">[op2 addDependency:op1]; // 让op2 依赖于 op1，则先执行op1，在执行op2</span><br><span class="line"></span><br><span class="line">// 4.添加操作到队列中</span><br><span class="line">[queue addOperation:op1];</span><br><span class="line">[queue addOperation:op2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - NSOperation 优先级 &amp; 服务质量（只是尽可能的 并不是绝对的）</span><br><span class="line">//NSOperation 提供了queuePriority（优先级）属性，queuePriority属性适用于同一操作队列中的操作，不适用于不同操作队列中的操作。默认情况下，所有新创建的操作对象优先级都是NSOperationQueuePriorityNormal。但是我们可以通过setQueuePriority:方法来改变当前操作在同一队列中的执行优先级。</span><br><span class="line"></span><br><span class="line">//对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）</span><br><span class="line"></span><br><span class="line">//准备就绪状态：当一个操作的所有依赖都已经完成时，操作对象通常会进入准备就绪状态，等待执行</span><br><span class="line"></span><br><span class="line">//queuePriority 属性（尽可能的并不是绝对的）决定了进入准备就绪状态下的操作之间的开始执行顺序。并且，优先级不能取代依赖关系。</span><br><span class="line">//如果一个队列中既包含高优先级操作，又包含低优先级操作，并且两个操作都已经准备就绪，那么队列先执行高优先级操作。比如上例中，如果 op1 和 op4 是不同优先级的操作，那么就会先执行优先级高的操作。</span><br><span class="line">//如果，一个队列中既包含了准备就绪状态的操作，又包含了未准备就绪的操作，未准备就绪的操作优先级比准备就绪的操作优先级高。那么，虽然准备就绪的操作优先级低，也会优先执行。优先级不能取代依赖关系。如果要控制操作间的启动顺序，则必须使用依赖关系</span><br><span class="line"></span><br><span class="line">- (void)queuePriority&#123;</span><br><span class="line">// 1.创建队列</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span><br><span class="line">//    设置最大并发操作数 来控制队列的串行或者并发</span><br><span class="line">//    queue.maxConcurrentOperationCount = 1; //串行</span><br><span class="line">//        queue.maxConcurrentOperationCount = 8;//并发</span><br><span class="line">// 2.创建操作</span><br><span class="line">// 使用 NSInvocationOperation 创建操作1</span><br><span class="line">NSInvocationOperation *op1 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(invocationTask) object:nil];</span><br><span class="line"></span><br><span class="line">// 使用 NSInvocationOperation 创建操作2</span><br><span class="line">NSInvocationOperation *op2 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(invocationTask2) object:nil];</span><br><span class="line"></span><br><span class="line">// 使用 NSInvocationOperation 创建操作2</span><br><span class="line">NSInvocationOperation *op3 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(invocationTask3) object:nil];</span><br><span class="line"></span><br><span class="line">//    同一个队列中的操作优先级 执行的先后 并不是结束的先后</span><br><span class="line">//    op1.queuePriority = NSOperationQueuePriorityVeryHigh;</span><br><span class="line">//    op2.queuePriority = NSOperationQueuePriorityHigh;</span><br><span class="line">//    op3.queuePriority = NSOperationQueuePriorityNormal;</span><br><span class="line"></span><br><span class="line">//    服务质量  在iOS 8.0前,通过设置操作的优先级,尽可能的保证某个操作优先处理,随着硬件性能上的提升,通过设置优先级效果已经越来越不明显,在iOS 8.0后,推出了服务质量,通过设置服务质量,让系统优先处理某一个操作 目前也是越来越不明显</span><br><span class="line">//    op1.qualityOfService = NSQualityOfServiceUserInteractive;</span><br><span class="line">//    op2.qualityOfService = NSQualityOfServiceBackground;</span><br><span class="line">//    op3.qualityOfService = NSQualityOfServiceDefault;</span><br><span class="line"></span><br><span class="line">// 3.使用 addOperation: 添加所有操作到队列中</span><br><span class="line">[queue addOperation:op1]; // [op1 start] 添加到队列中 无需再自己调用start</span><br><span class="line">[queue addOperation:op2]; // [op2 start]</span><br><span class="line">[queue addOperation:op3]; // [op3 start]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - NSOperation、NSOperationQueue 线程间的通信</span><br><span class="line">/**</span><br><span class="line">* 线程间通信</span><br><span class="line">*/</span><br><span class="line">- (void)communication &#123;</span><br><span class="line"></span><br><span class="line">// 1.创建队列</span><br><span class="line">NSOperationQueue *queue = [[NSOperationQueue alloc]init];</span><br><span class="line"></span><br><span class="line">// 2.添加操作</span><br><span class="line">[queue addOperationWithBlock:^&#123;</span><br><span class="line">// 异步进行耗时操作</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;1---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 回到主线程</span><br><span class="line">[[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">// 进行一些 UI 刷新等操作</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">NSLog(@&quot;2---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - 执行的操作</span><br><span class="line">- (void)invocationTask&#123;</span><br><span class="line">NSLog(@&quot;1&quot;);</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">NSLog(@&quot;invocationOperation1---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)invocationTask2&#123;</span><br><span class="line">NSLog(@&quot;2&quot;);</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">NSLog(@&quot;invocationOperation2---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)invocationTask3&#123;</span><br><span class="line">NSLog(@&quot;3&quot;);</span><br><span class="line">for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">NSLog(@&quot;invocationOperation3---%@&quot;, [NSThread currentThread]); // 打印当前线程</span><br><span class="line">[NSThread sleepForTimeInterval:2]; // 模拟耗时操作</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####一、 为什么要使用 NSOperation、NSOperationQueue&lt;br&gt;NSOperation、NSOperationQueue 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高。&lt;br&gt;可添加完成的代码块，在操作完成后执行。&lt;br&gt;添加操作之间的依赖关系，方便的控制执行顺序。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
